<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
Copyright 2014 Kevin Quan (kevin.quan@gmail.com)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0
	
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<templates>
<template 
	autoinsert="true" 
	context="java" 
	deleted="false" 
	description="Creates a generic array adapter with view holder pattern" 
	enabled="true" 
	name="ArrayAdapter"
>    protected static class ${enclosing_type}Adapter extends ArrayAdapter&lt;${argType}&gt; {&#13;
&#13;
        private static class ViewHolder {&#13;
            TextView title;&#13;
        }&#13;
        &#13;
        public ${enclosing_type}Adapter(Context context, List&lt;${argType}&gt; objects) {&#13;
            super(context, View.NO_ID, objects);&#13;
        }&#13;
&#13;
        @Override&#13;
        public View getView(int position, View convertView, ViewGroup parent) {&#13;
            if (convertView == null) {&#13;
                convertView = LayoutInflater.from(getContext()).inflate(R.layout.UPDATE_THIS, null);&#13;
                ViewHolder holder = new ViewHolder();&#13;
                holder.title = (TextView)convertView.findViewById(R.id.UPDATE_THIS);&#13;
                convertView.setTag(holder);&#13;
            }&#13;
            &#13;
            ${argType} item = getItem(position);&#13;
            ViewHolder holder = (ViewHolder)convertView.getTag();&#13;
            holder.title.setText("UPDATE_THIS");&#13;
            &#13;
            return convertView;&#13;
        }&#13;
        &#13;
    }</template>
<template 
	autoinsert="true" 
	context="java" 
	deleted="false" 
	description="Creates a constructors for a new fragment instance" 
	enabled="true" 
	name="newInstance"
>	public static ${enclosing_type} newInstance() {&#13;
		${enclosing_type} fragment = new ${enclosing_type}();&#13;
		Bundle arguments = new Bundle();&#13;
		fragment.setArguments(arguments);&#13;
		return fragment;&#13;
	}&#13;
&#13;
	public ${enclosing_type}() {}&#13;
&#13;
    @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {&#13;
        View view = inflater.inflate(View.NO_ID, null);&#13;
        return view;&#13;
    }&#13;
</template>
<template 
	autoinsert="true" 
	context="java" 
	deleted="false" 
	description="Creates an empty setOnClickListener for a View" 
	enabled="true" 
	name="setOnClickListener"
>.setOnClickListener(new View.OnClickListener() {&#13;
	@Override public void onClick(View view) {&#13;
		if (getActivity() == null) {&#13;
			return;&#13;
		}&#13;
	}&#13;
});</template>
<template 
	autoinsert="true" 
	context="java" 
	deleted="false" 
	description="Creates an empty setOnItemClickListener for a ListView" 
	enabled="true" 
	name="setOnItemClickListener"
>.setOnItemClickListener(new OnItemClickListener() {&#13;
	@Override public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {&#13;
    	if (getActivity() == null) {&#13;
        	return;&#13;
		}&#13;
	}&#13;
});</template>
</templates>